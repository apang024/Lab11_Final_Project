/*	Author: Ashley Pang
 *	Lab Section: 021
 *	Assignment: Lab #11
 *	Exercise Description: Test Demo for LED
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */
#include <avr/io.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#include "keypad.h"
#include "scheduler.h"
#include "timer.h"
#endif

enum LEDMatrixStates { shiftRow };

unsigned char currArray[] = { 0x3C, 0x42, 0x46, 0x4A, 0x52, 0x62, 0x42, 0x3C };
// unsigned char currArray[] = {  };

int LEDMatrix(int state) {
    static unsigned char i = 0;
    static unsigned char pattern;
    static unsigned char row = 0x01;

    switch (state) {
    	case shiftRow: break;
	default: state = shiftRow; break;
    }
    switch (state) {
    	case shiftRow:
	    if (i == 8) {	// Total 8 rows
	    	i = 0;
		row = 0x01;
	    }
	    else {
	    	pattern = currArray[i++];
    		PORTC = ~pattern;
    		PORTD = row;
		row <<= 1;
	    }
	    break;
	default: break;
    }
    return state;
}
int main(void) {
    DDRC = 0xFF; PORTC = 0x00;
    DDRD = 0xFF; PORTD = 0x00;

    static task task1;
    task* tasks[] = { &task1 };
    const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
    const char start = -1;
    task1.state = start;
    task1.period = 1;
    task1.elapsedTime = task1.period;
    task1.TickFct = &LEDMatrix;

    unsigned short i;
    unsigned long GCD = tasks[0]->period;
    for( i = 1; i < numTasks; i++) {
    	GCD = findGCD(GCD, tasks[i]->period);
    }

    TimerSet(GCD);
    TimerOn();

    while(1) {
    	for (i = 0; i < numTasks; i++) {
	    if (tasks[i]->elapsedTime == tasks[i]->period) {
	    	tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
		tasks[i]->elapsedTime = 0;
	    }
	    tasks[i]->elapsedTime += GCD;
	}
	while(!TimerFlag);
	TimerFlag = 0;
    }
    return 0;
}
